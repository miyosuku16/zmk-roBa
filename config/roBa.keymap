#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_parnethesis {
            bindings = <&kp LS(N8)>;
            key-positions = <11 12>;
        };

        right_parnenthesis {
            bindings = <&kp LS(N9)>;
            key-positions = <19 20>;
        };

        atmark {
            bindings = <&kp LS(NUMBER_2)>;
            key-positions = <13 12>;
        };

        tab {
            bindings = <&kp C_AL_DATABASE>;
            key-positions = <10 11>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt TAB Q                 &kp W          &kp E         &kp R         &kp T                                             &kp Y        &kp U  &kp I      &kp O       &lt 5 P
&mt LEFT_SHIFT A          &kp S          &kp D         &kp F         &kp G             &kp LS(LG(S))      &kp LCTRL    &kp H        &kp J  &kp K      &kp L       &kp MINUS
&lt 5 Z                   &kp X          &kp C         &kp V         &kp B             &kp RA(SPACE)      &kp DEL      &kp N        &kp M  &kp COMMA  &kp PERIOD  &kp LA(NUMBER_2)
&lt_to_layer_0 1 LC(TAB)  &lt 2 LG(TAB)  &lt 3 ESCAPE  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp BACKSPACE      &lt 2 SPACE  &lt 1 ENTER                                &lt 6 LA(NUMBER_3)
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp LEFT_BRACKET  &kp HASH       &kp DOLLAR  &kp PERCENT                                              &kp PERIOD      &kp N7        &kp N8        &kp N9        &kp RS(EQUAL)
&kp QUESTION     &kp LS(NUMBER_6)  &kp LS(MINUS)  &none       &none        &kp LC(LA(KP_NUMBER_0))      &kp BACKSPACE  &kp UNDERSCORE  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&none            &kp SQT           &kp SEMICOLON  &none       &kp PERIOD   &kp LS(MINUS)                &kp DELETE     &kp N0          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LS(N8)
&trans           &trans            &trans         &trans      &trans       &kp LCMD                     &kp SPACE      &kp ENTER                                                 &kp SLASH
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans    &trans          &kp UP_ARROW    &kp LC(LG(UP_ARROW))  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT             &kp END
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans    &kp LG(LEFT)    &trans          &kp LG(RIGHT)         &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                    &kp F1                &kp F2        &kp F3           &kp F4      &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13               &kp F6                &kp F7        &kp F8           &kp F9      &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp K_MUTE  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans                &trans                                                           &kp F12
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans        &trans    &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1      &mkp MB3  &mkp MB2       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LG(LEFT)  &trans    &kp LG(RIGHT)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                         &trans
            >;
        };

        SCROLL {
            bindings = <
&kp LG(C)  &kp LG(C)  &kp C   &kp LG(N5)  &trans                      &trans  &trans  &trans  &trans  &trans
&trans     &trans     &trans  &trans      &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans     &trans  &trans      &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans     &trans  &trans      &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
